require 'fileutils'

platform :android do

  ####################################################
  # üü¢ Helper methods
  ####################################################

  def extract_locales
    project_root = File.expand_path("..", __dir__)
    arb_files = Dir[File.join(project_root, "lib/l10n/app_*.arb")]
    locales = arb_files.map { |file| file.match(/app_(.+)\.arb/)[1] }
    locales.uniq
  end

  def play_supported_locales
    @play_supported_locales ||= %w[
      af-ZA am-ET ar-EG bg-BG ca-ES cs-CZ da-DK de-DE el-GR en-US en-GB es-ES es-419 et fi-FI fr-FR fr-CA
      iw-IL hi-IN hr-HR hu-HU id-ID is-IS it-IT ja-JP ko-KR lt-LT lv-LV ms-MY nl-NL no-NO pl-PL pt-PT pt-BR
      ro-RO ru-RU sk-SK sl-SI sr sv-SE sw fil-PH th-TH tr-TR uk vi-VN zh-CN zh-HK zh-TW zu
    ]
  end

  def to_play_locale(locale)
    mapping = {
      "af" => "af-ZA", "am" => "am-ET", "ar" => "ar-EG", "bg" => "bg-BG", "ca" => "ca-ES", "cs" => "cs-CZ",
      "da" => "da-DK", "de" => "de-DE", "el" => "el-GR", "en" => "en-US", "en-US" => "en-US", "en-GB" => "en-GB",
      "es" => "es-ES", "es-ES" => "es-ES", "es-419" => "es-419", "et" => "et", "fi" => "fi-FI", "fr" => "fr-FR",
      "fr-FR" => "fr-FR", "fr-CA" => "fr-CA", "he" => "iw-IL", "hi" => "hi-IN", "hr" => "hr-HR", "hu" => "hu-HU",
      "id" => "id-ID", "in" => "id-ID", "is" => "is-IS", "it" => "it-IT", "ja" => "ja-JP", "ko" => "ko-KR",
      "lt" => "lt-LT", "lv" => "lv-LV", "ms" => "ms-MY", "nl" => "nl-NL", "no" => "no-NO", "pl" => "pl-PL",
      "pt" => "pt-PT", "pt-PT" => "pt-PT", "pt-BR" => "pt-BR", "ro" => "ro-RO", "ru" => "ru-RU", "sk" => "sk-SK",
      "sl" => "sl-SI", "sr" => "sr", "sv" => "sv-SE", "sw" => "sw", "fil" => "fil-PH", "th" => "th-TH",
      "tr" => "tr-TR", "uk" => "uk", "vi" => "vi-VN", "zh" => "zh-CN", "zh-CN" => "zh-CN", "zh-HK" => "zh-HK",
      "zh-TW" => "zh-TW", "zu" => "zu"
    }
    # 1. Mapping explicite
    if mapping.key?(locale)
      play_locale = mapping[locale]
      return play_locale if play_supported_locales.include?(play_locale)
      return nil
    end
    # 2. xx_XX ou xx-XX ‚Üí xx-XX
    if locale =~ /^([a-z]{2,3})[_-]([A-Z]{2,3})$/
      play_locale = "#{$1}-#{$2}"
      return play_locale if play_supported_locales.include?(play_locale)
      return nil
    end
    # 3. xx ‚Üí mapping ou xx-XX
    if locale =~ /^[a-z]{2}$/
      play_locale = "#{locale}-#{locale.upcase}"
      return play_locale if play_supported_locales.include?(play_locale)
      return nil
    end
    # 4. Si d√©j√† au bon format et support√©
    return locale if play_supported_locales.include?(locale)
    # 5. Sinon, non support√©
    nil
  end

  def set_emulator_resolution(emulator_id, dest_folder)
    case dest_folder
    when "phoneScreenshots"
      size = "1080x2340"
      density = 420
    when "sevenInchScreenshots"
      size = "1200x1920"
      density = 320
    when "tenInchScreenshots"
      size = "1600x2560"
      density = 320
    else
      UI.important("Type de screenshots inconnu, r√©solution non modifi√©e.")
      return
    end
    UI.message("üñ•Ô∏è  Changement de r√©solution de l'√©mulateur (#{emulator_id}) : #{size} @ #{density}dpi")
    sh("adb -s #{emulator_id} shell wm size #{size}")
    sh("adb -s #{emulator_id} shell wm density #{density}")
    sleep(2)
  end

  def reset_emulator_resolution(emulator_id)
    UI.message("üîÑ R√©initialisation de la r√©solution de l'√©mulateur (#{emulator_id})")
    sh("adb -s #{emulator_id} shell wm size reset")
    sh("adb -s #{emulator_id} shell wm density reset")
  end

  ####################################################
  # üì∏ Screenshots multilingues
  ####################################################

  desc "üì∏ G√©n√©rer les screenshots Android multilingues (t√©l√©phone + tablettes)"
  lane :screenshots do
    # === 1. Screenshots t√©l√©phone ===
     take_screenshots_for_emulator("emulator_phone_screenshots_voczilla", "phoneScreenshots")

    # === 2. Screenshots tablette 7 pouces ===
     take_screenshots_for_emulator("emulator_tablet_7pouces_screenshots_voczilla", "sevenInchScreenshots")

    # === 3. Screenshots tablette 10 pouces ===
    take_screenshots_for_emulator("emulator_tablet_10pouces_screenshots_voczilla", "tenInchScreenshots")
  end

  def take_screenshots_for_emulator(avd_name, dest_folder)
    devices = sh("adb devices", log: false)
    emulator_running = devices.lines.any? { |line| line.start_with?("emulator") && line.include?("device") }

    unless emulator_running
      UI.message("Aucun √©mulateur d√©tect√©, lancement de l'√©mulateur #{avd_name}...")

      emulator_cmd = [
        ENV['ANDROID_HOME'] + "/emulator/emulator",
        "-avd", avd_name,
        "-no-snapshot-load",
        "-no-audio"
      ]
      Process.spawn(*emulator_cmd, [:out, :err] => "/dev/null")
      UI.message("Attente du d√©marrage de l'√©mulateur...")

      # Attendre que l'√©mulateur apparaisse dans adb devices
      ready = false
      24.times do
        sleep(5)
        devices = sh("adb devices", log: false)
        if devices.lines.any? { |line| line.start_with?("emulator") && line.include?("device") }
          ready = true
          break
        end
      end
      unless ready
        UI.user_error!("L'√©mulateur n'a pas d√©marr√© apr√®s 2 minutes.")
      end
    else
      UI.message("Un √©mulateur est d√©j√† lanc√©.")
    end

    UI.message("Attente de la fin du boot Android...")
    booted = false
    24.times do
      sleep(5)
      boot_status = sh("adb shell getprop sys.boot_completed", log: false).strip
      if boot_status == "1"
        booted = true
        break
      end
    end
    unless booted
      UI.user_error!("L'√©mulateur n'a pas fini de booter apr√®s 2 minutes.")
    end

    UI.success("L'√©mulateur #{avd_name} est pr√™t, lancement des screenshots.")

    # D√©tecter l'ID de l'√©mulateur lanc√©
    emulator_id = sh("adb devices", log: false).lines.find { |line| line.start_with?("emulator") && line.include?("device") }.to_s.split("\t").first || "emulator-5554"

    # Changer la r√©solution selon le type de screenshots
    set_emulator_resolution(emulator_id, dest_folder)

    project_root = File.expand_path("..", __dir__)
    dart_script = File.join(project_root, "fastlane/generate_metadata.dart")

    unless File.exist?(dart_script)
      UI.user_error!("‚ùå Script Dart introuvable: #{dart_script}")
    end

    Dir.chdir(project_root) do
      sh("dart '#{dart_script}'")
    end

    locales = extract_locales
    if locales.empty?
      UI.user_error!("‚ùå Aucune locale trouv√©e dans lib/l10n")
    end

    # Nettoyer les captures d'√©cran avant de g√©n√©rer
    screenshots_dir = File.join(project_root, "test_driver/screenshots")
    FileUtils.rm_rf(screenshots_dir)
    FileUtils.mkdir_p(screenshots_dir)
    UI.message("üßπ Dossier screenshots nettoy√©.")

    sh("flutter build apk")

    locales.each do |locale|
      UI.message("üåê Locale : #{locale}")

      # Lancer les tests d'int√©gration
      sh("flutter drive --driver=test_driver/integration_test.dart --target=test_driver/app.dart -d #{emulator_id} --dart-define=LOCALE=#{locale} --screenshot=test_driver/screenshots")

      play_locale = to_play_locale(locale)
      next unless play_locale # Ignore les locales non support√©es par Google Play

      dest_dir = File.join(project_root, "fastlane/metadata/#{play_locale}/images/#{dest_folder}")
      FileUtils.mkdir_p(dest_dir)

      screenshots = Dir[File.join(screenshots_dir, "*.png")]
      UI.message(screenshots)
      if screenshots.empty?
        UI.important("Aucune capture d'√©cran trouv√©e pour la locale #{locale} dans test_driver/screenshots/")
      else
        FileUtils.cp(screenshots, dest_dir)
      end
    end

    # R√©initialiser la r√©solution de l'√©mulateur (optionnel mais recommand√©)
    reset_emulator_resolution(emulator_id)

    # Arr√™ter l'√©mulateur
    UI.message("Arr√™t de l'√©mulateur #{avd_name}...")
    sh("adb -s #{emulator_id} emu avd wipe-data")
    sh("adb -s #{emulator_id} emu kill")
    UI.message("Attente de 10 secondes")
    sleep(10)
  end

  ####################################################
  # üöÄ Release Google Play
  ####################################################

  desc "üöÄ Publier Android (metadata + screenshots)"
  lane :release do
    screenshots
    supply(
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_changelogs: true,
      skip_upload_metadata: false,
      skip_upload_screenshots: false
    )
  end

  ####################################################
  # ‚úÖ Tests unitaires
  ####################################################

  desc "‚úÖ Lancer les tests unitaires Android"
  lane :test do
    gradle(
      task: "testReleaseUnitTest"
    )
  end

end
