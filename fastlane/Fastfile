platform :all do
  desc "📸 Générer les métadonnées et captures d'écran Android & iOS multilingues"

  lane :generate_metadata do
    project_root = File.expand_path("..", __dir__)
    dart_script_android = File.join(project_root, "fastlane/generate_metadata_android.dart")
    dart_script_ios = File.join(project_root, "fastlane/generate_metadata_ios.dart")

    UI.user_error!("❌ Script Dart android introuvable: #{dart_script_android}") unless File.exist?(dart_script_android)
    UI.user_error!("❌ Script Dart iOS introuvable: #{dart_script_ios}") unless File.exist?(dart_script_ios)

    UI.message("🧠 Génération des métadonnées Android...")
    Dir.chdir(project_root) { sh("dart '#{dart_script_android}'") }

    UI.message("🧠 Génération des métadonnées iOS...")
    Dir.chdir(project_root) { sh("dart '#{dart_script_ios}'") }
  end

  lane :screenshots do
    avd_name = "emulator_tablet_10pouces_screenshots_voczilla"
    project_root = File.expand_path("..", __dir__)

    # On nettoie une seule fois au début pour être sûr de partir sur de bonnes bases
    UI.message("🧹 Nettoyage initial du projet...")
    sh("flutter clean")

    # On génère les métadonnées (titres, descriptions, etc.)
    sh("fastlane all generate_metadata")

    UI.message("🌟 Lancement de l'émulateur...")
    start_emulator_once(avd_name)


 # "ios" => [
         # 'iPad Pro (12.9-inch) (3rd generation)',
         # 'iphone6_7_inch',
         # 'ipad_12_9_inch'
        #],
    # On recompile l'application une seule fois après le clean
    UI.message("📦 Construction de l'application...")
    sh("flutter build apk")
    {
        "android" => [
           'FeatureGraphic'
        ],
        "ios" => [
           'iPad Pro (12.9-inch) (3rd generation)',
           'iphone6_7_inch',
           'ipad_12_9_inch'
        ],
    }.each do |platform, folders|
      folders.each do |folder|
        run_screenshots_for_folder(folder, platform)
          sh("flutter clean")
      end
      sh("flutter clean")
    end

    UI.message("🚩 Arrêt de l'émulateur...")
    stop_emulator

    UI.success("✅ Toutes les captures d'écran ont été générées avec succès !")
  end

  # Cette fonction est le pont entre Ruby (Fastlane) et Dart (votre logique de mappage).
  # Elle est déjà correcte et garantit que la logique de locale_mapper.dart est respectée.
  def get_normalized_locale(locale, platform)
    project_root = File.expand_path("..", __dir__)
    map_script = File.join(project_root, "fastlane/invoke_locale_mapper.dart")
    UI.user_error!("❌ Script de mapping de locale introuvable: #{map_script}") unless File.exist?(map_script)

    normalized = sh("dart \"#{map_script}\" #{platform} #{locale}", log: false).strip
    return normalized.empty? ? nil : normalized
  end

  def run_screenshots_for_folder(dest_folder, platformStore)
    project_root = File.expand_path("..", __dir__)
    screenshots_dir = File.join(project_root, "test_driver/screenshots/")
    emulator_id = get_running_emulator_id
    set_emulator_resolution(emulator_id, dest_folder)

    locales = extract_locales
    UI.user_error!("❌ Aucune locale trouvée dans lib/l10n") if locales.empty?

    locales.each do |locale|
      normalized_locale = get_normalized_locale(locale, platformStore)
      if normalized_locale.nil?
        UI.important("⚠️ Locale #{locale} non supportée pour #{platformStore}. Ignorée.")
        next
      end

      FileUtils.rm_rf(screenshots_dir)
      FileUtils.mkdir_p(screenshots_dir)

      UI.message("🌐 Prise des captures pour [#{dest_folder}] en [#{locale}]...")
      is_feature = dest_folder == "FeatureGraphic"

      begin
        sh("caffeinate -s flutter drive \
          --driver=test_driver/integration_test.dart \
          --target=test_driver/app.dart \
          -d #{emulator_id} \
          --dart-define=LOCALE=#{locale} \
          --dart-define=FOR_FEATURE_GRAPHIC=#{is_feature} \
          --dart-define=PLATFORM='#{platformStore}' \
          --dart-define=DESTFOLDER='#{dest_folder}' \
          --screenshot=test_driver/screenshots")
      rescue => e
        UI.error("🚨 Erreur durant flutter drive pour #{locale}/#{dest_folder} : #{e}")
        next
      end

      driver_files_to_delete = Dir[File.join(screenshots_dir, "driver*.png")]
      FileUtils.rm(driver_files_to_delete) unless driver_files_to_delete.empty?

      screenshots = Dir[File.join(screenshots_dir, "*.png")]

      # 💅 AMÉLIORATION : Logique de chemin clarifiée
      relative_metadata = if is_feature
                            File.join(platformStore, normalized_locale, "images")
                          elsif platformStore == "ios"
                            File.join(platformStore, normalized_locale)
                          else # android
                            File.join(platformStore, normalized_locale, "images", dest_folder)
                          end

      dest_dir_project = File.join(project_root, "fastlane/metadata", relative_metadata)
      dest_dir_symlink = File.join("/Volumes/data/voczilla/metadata", relative_metadata)

      [dest_dir_project, dest_dir_symlink].each do |dest_dir|
        UI.message("📁 Copie des captures vers : #{dest_dir}")
        FileUtils.mkdir_p(dest_dir)
        screenshots.empty? ? UI.important("Aucune capture pour #{locale}") : FileUtils.cp(screenshots, dest_dir)
      end
    end

    reset_emulator_resolution(emulator_id)
  end

  def extract_locales
    project_root = File.expand_path("..", __dir__)
    arb_files = Dir[File.join(project_root, "lib/l10n/app_*.arb")]
    locales = arb_files.map { |f| f.match(/app_(.+)\.arb$/)&.captures&.first }.compact.uniq
    UI.user_error!("❌ Aucune locale trouvée dans les fichiers ARB.") if locales.empty?
    locales
  end

  def get_running_emulator_id
    line = sh("adb devices", log: false).lines.find { |l| l.start_with?("emulator") && l.include?("device") }
    line&.split("\t")&.first
  end

  def start_emulator_once(avd_name)
    return if get_running_emulator_id

    emulator_cmd = [
      File.join(ENV['ANDROID_HOME'], "emulator", "emulator"),
      "-avd", avd_name,
      "-no-snapshot-load",
      "-no-audio"
    ]
    Process.spawn(*emulator_cmd, [:out, :err] => "/dev/null")

    UI.message("⌛ Attente de connexion ADB...")
    24.times do
      sleep(5)
      break if get_running_emulator_id
    end

    UI.user_error!("❌ L'émulateur n'a pas démarré après 2 minutes.") unless get_running_emulator_id

    UI.message("⚙️ Attente de boot complet Android...")
    24.times do
      boot_status = sh("adb shell getprop sys.boot_completed", log: false).strip
      break if boot_status == "1"
      sleep(2)
    end
  end

  def stop_emulator
    emulator_id = get_running_emulator_id
    return unless emulator_id
    sh("adb -s #{emulator_id} emu kill")
    sleep(5)
  end

  def reset_emulator_resolution(emulator_id)
    sh("adb -s #{emulator_id} shell wm size reset && adb -s #{emulator_id} shell wm density reset")
  end

  def set_emulator_resolution(emulator_id, dest_folder)
    resolution_map = {
      "phoneScreenshots" => ["1080x1920", "420"],
      "sevenInchScreenshots" => ["800x1280", "213"],
      "tenInchScreenshots" => ["1600x2560", "320"],
      "FeatureGraphic" => ["1024x500", "160"],
      "iphone6_7_inch" => ["1290x2796", "460"],
      "ipad_12_9_inch" => ["2048x2732", "264"],
      "iPad Pro (12.9-inch) (3rd generation)" => ["2048x2732", "264"]
    }

    size, density = resolution_map[dest_folder] || [nil, nil]
    if size && density
      sh("adb -s #{emulator_id} shell wm size #{size} && adb -s #{emulator_id} shell wm density #{density}")
    else
      UI.error("Unsupported size: #{dest_folder}")
    end
  end
end
