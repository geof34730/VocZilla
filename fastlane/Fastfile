# /Users/geoffreypetain/IdeaProjects/VocZilla-all/voczilla/fastlane/Fastfile

platform :all do
  desc "üì∏ G√©n√©rer les m√©tadonn√©es et captures d'√©cran Android & iOS multilingues"

  # Lane pour g√©n√©rer uniquement les fichiers de m√©tadonn√©es (titres, descriptions, etc.)
  lane :generate_metadata do
    project_root = File.expand_path("..", __dir__)
    dart_script_android = File.join(project_root, "fastlane/generate_metadata_android.dart")
    dart_script_ios = File.join(project_root, "fastlane/generate_metadata_ios.dart")

    UI.user_error!("‚ùå Script Dart android introuvable: #{dart_script_android}") unless File.exist?(dart_script_android)
    UI.user_error!("‚ùå Script Dart iOS introuvable: #{dart_script_ios}") unless File.exist?(dart_script_ios)

    UI.message("üß† G√©n√©ration des m√©tadonn√©es Android...")
    Dir.chdir(project_root) { sh("dart '#{dart_script_android}'") }

    UI.message("üß† G√©n√©ration des m√©tadonn√©es iOS...")
    Dir.chdir(project_root) { sh("dart '#{dart_script_ios}'") }
  end

  # Lane compl√®te pour g√©n√©rer les captures d'√©cran
  lane :screenshots do
    avd_name = "emulator_tablet_10pouces_screenshots_voczilla"
    project_root = File.expand_path("..", __dir__)

    # 1. G√©n√©rer les m√©tadonn√©es textuelles
    sh("fastlane all generate_metadata")

    # 2. Construire l'APK pour les tests
    UI.message("üì¶ Construction APK...")
    sh("flutter build apk")

    # 3. D√©marrer l'√©mulateur
    UI.message("üåü Lancement de l'√©mulateur...")
    start_emulator_once(avd_name)

    # 4. D√©finir les formats de capture d'√©cran √† g√©n√©rer
    # Exemples:
    # "android" => %w[phoneScreenshots sevenInchScreenshots tenInchScreenshots FeatureGraphic]
    #"ios" => %w[iphone4_7_inch iphone5_5_inch iphone5_8_inch iphone6_5_inch iphone6_7_inch ipad_9_7_inch ipad_10_5_inch ipad_11_inch ipad_12_9_inch ipad_13_inch]
    #"ios" => %w[iphone6_7_inch ipad_12_9_inch iPad Pro (12.9-inch) (3rd generation)],
    {
      "android" => %w[phoneScreenshots sevenInchScreenshots tenInchScreenshots FeatureGraphic],
      "ios" => %w[iphone6_7_inch ipad_12_9_inch,iPad Pro (12.9-inch) (3rd generation)],
    #  "android" => %w[FeatureGraphic]
    }.each do |platform, folders|
      folders.each do |folder|
        run_screenshots_for_folder(folder, platform)
      end
    end

    # 5. Arr√™ter l'√©mulateur
    UI.message("üö© Arr√™t de l'√©mulateur...")
    stop_emulator
  end

  # Appelle le script Dart centralis√© pour obtenir la locale normalis√©e pour un store.
  # C'est la m√©thode recommand√©e pour garantir la coh√©rence dans tout le projet.
  def get_normalized_locale(locale, platform)
    project_root = File.expand_path("..", __dir__)
    # On appelle le script "pont" qui, lui, utilise la logique de locale_mapper.dart
    map_script = File.join(project_root, "fastlane/invoke_locale_mapper.dart")
    UI.user_error!("‚ùå Script de mapping de locale introuvable: #{map_script}") unless File.exist?(map_script)

    # Ex√©cute le script Dart et capture sa sortie. `log: false` √©vite de polluer la console.
    normalized = sh("dart \"#{map_script}\" #{platform} #{locale}", log: false).strip

    # Retourne la locale si le script a produit une sortie, sinon nil.
    return normalized.empty? ? nil : normalized
  end

  # Ex√©cute la prise de captures pour un format d'appareil donn√©
  def run_screenshots_for_folder(dest_folder, platformStore)
    project_root = File.expand_path("..", __dir__)
    screenshots_dir = File.join(project_root, "test_driver/screenshots/")
    emulator_id = get_running_emulator_id

    set_emulator_resolution(emulator_id, dest_folder)

    locales = extract_locales
    UI.user_error!("‚ùå Aucune locale trouv√©e dans lib/l10n") if locales.empty?

    locales.each do |locale|
      # Il est crucial de nettoyer le dossier pour CHAQUE locale
      FileUtils.rm_rf(screenshots_dir)
      FileUtils.mkdir_p(screenshots_dir)

      UI.message("üåê Prise des captures pour [#{dest_folder}] en [#{locale}]...")
      is_feature = dest_folder == "FeatureGraphic"

      begin
        sh("caffeinate -s flutter drive \
          --driver=test_driver/integration_test.dart \
          --target=test_driver/app.dart \
          -d #{emulator_id} \
          --dart-define=LOCALE=#{locale} \
          --dart-define=FOR_FEATURE_GRAPHIC=#{is_feature} \
          --dart-define=PLATFORM=#{platformStore} \
          --dart-define=DESTFOLDER=#{dest_folder} \
          --screenshot=test_driver/screenshots")
      rescue => e
        UI.error("üö® Erreur durant flutter drive pour #{locale}/#{dest_folder} : #{e}")
        next
      end

      # Utilise la logique centralis√©e pour obtenir le nom du dossier de locale
      normalized_locale = get_normalized_locale(locale, platformStore)
      next unless normalized_locale

      # Supprime les captures d'√©cran par d√©faut g√©n√©r√©es par flutter_driver (ex: driver_01.png)
      driver_files_to_delete = Dir[File.join(screenshots_dir, "driver*.png")]
      unless driver_files_to_delete.empty?
        UI.message("üóëÔ∏è  Suppression des captures interm√©diaires: #{driver_files_to_delete.join(', ')}")
        FileUtils.rm(driver_files_to_delete)
      end

      # Copie les captures d'√©cran restantes
      screenshots = Dir[File.join(screenshots_dir, "*.png")]

      dest_dir = if is_feature
                   File.join(project_root, "fastlane/metadata/#{platformStore}/#{normalized_locale}/images/")
                 else
                   if platformStore == "ios"
                     File.join(project_root, "fastlane/metadata/#{platformStore}/#{normalized_locale}/")
                   else
                     File.join(project_root, "fastlane/metadata/#{platformStore}/#{normalized_locale}/images/#{dest_folder}/")
                   end
                 end

      UI.message("üìÅ Copie des captures vers : #{dest_dir}")
      FileUtils.mkdir_p(dest_dir)
      screenshots.empty? ? UI.important("Aucune capture pour #{locale}") : FileUtils.cp(screenshots, dest_dir)
    end

    reset_emulator_resolution(emulator_id)
  end

  # Extrait les locales depuis les noms de fichiers .arb
  def extract_locales
    project_root = File.expand_path("..", __dir__)
    arb_files = Dir[File.join(project_root, "lib/l10n/app_*.arb")]
    locales = arb_files.map { |f| f.match(/app_(.+)\.arb$/)&.captures&.first }.compact.uniq
    UI.user_error!("‚ùå Aucune locale trouv√©e dans les fichiers ARB.") if locales.empty?
    locales
  end

  # --- Helpers pour l'√©mulateur ---

  def get_running_emulator_id
    line = sh("adb devices", log: false).lines.find { |l| l.start_with?("emulator") && l.include?("device") }
    line&.split("\t")&.first
  end

  def start_emulator_once(avd_name)
    return if get_running_emulator_id

    emulator_cmd = [
      File.join(ENV['ANDROID_HOME'], "emulator", "emulator"),
      "-avd", avd_name,
      "-no-snapshot-load",
      "-no-audio"
    ]
    Process.spawn(*emulator_cmd, [:out, :err] => "/dev/null")

    UI.message("‚åõ Attente de connexion ADB...")
    24.times do
      sleep(5)
      break if get_running_emulator_id
    end

    UI.user_error!("‚ùå L'√©mulateur n'a pas d√©marr√© apr√®s 2 minutes.") unless get_running_emulator_id

    UI.message("‚öôÔ∏è Attente de boot complet Android...")
    24.times do
      boot_status = sh("adb shell getprop sys.boot_completed", log: false).strip
      break if boot_status == "1"
      sleep(2)
    end
  end

  def stop_emulator
    emulator_id = get_running_emulator_id
    return unless emulator_id
    sh("adb -s #{emulator_id} emu kill")
    sleep(5)
  end

  def reset_emulator_resolution(emulator_id)
    sh("adb -s #{emulator_id} shell wm size reset && adb -s #{emulator_id} shell wm density reset")
  end

  def set_emulator_resolution(emulator_id, dest_folder)
    case dest_folder
    when "phoneScreenshots"
      sh("adb -s #{emulator_id} shell wm size 1080x1920 && adb -s #{emulator_id} shell wm density 420")
    when "sevenInchScreenshots"
      sh("adb -s #{emulator_id} shell wm size 800x1280 && adb -s #{emulator_id} shell wm density 213")
    when "tenInchScreenshots"
      sh("adb -s #{emulator_id} shell wm size 1600x2560 && adb -s #{emulator_id} shell wm density 320")
    when "FeatureGraphic"
      sh("adb -s #{emulator_id} shell wm size 1024x500 && adb -s #{emulator_id} shell wm density 160")
    when "iphone4_7_inch"
      sh("adb -s #{emulator_id} shell wm size 750x1334 && adb -s #{emulator_id} shell wm density 326")
    when "iphone5_5_inch"
      sh("adb -s #{emulator_id} shell wm size 1242x2208 && adb -s #{emulator_id} shell wm density 401")
    when "iphone5_8_inch"
      sh("adb -s #{emulator_id} shell wm size 1125x2436 && adb -s #{emulator_id} shell wm density 458")
    when "iphone6_1_inch"
      sh("adb -s #{emulator_id} shell wm size 1170x2532 && adb -s #{emulator_id} shell wm density 460")
    when "iphone6_5_inch"
      sh("adb -s #{emulator_id} shell wm size 1242x2688 && adb -s #{emulator_id} shell wm density 458")
    when "iphone6_7_inch"
      sh("adb -s #{emulator_id} shell wm size 1290x2796 && adb -s #{emulator_id} shell wm density 460")
    when "ipad_9_7_inch"
      sh("adb -s #{emulator_id} shell wm size 1536x2048 && adb -s #{emulator_id} shell wm density 264")
    when "ipad_10_5_inch"
      sh("adb -s #{emulator_id} shell wm size 1668x2224 && adb -s #{emulator_id} shell wm density 264")
    when "ipad_11_inch"
      sh("adb -s #{emulator_id} shell wm size 1668x2388 && adb -s #{emulator_id} shell wm density 264")
    when "ipad_12_9_inch"
      sh("adb -s #{emulator_id} shell wm size 2048x2732 && adb -s #{emulator_id} shell wm density 264")
    when "iPad Pro (12.9-inch) (3rd generation)"
      sh("adb -s #{emulator_id} shell wm size 2048x2732 && adb -s #{emulator_id} shell wm density 264")
    when "Mac"
      sh("adb -s #{emulator_id} shell wm size 1440x900 && adb -s #{emulator_id} shell wm density 220")
    else
      UI.error("Unsupported size: #{dest_folder}")
    end
  end
end
