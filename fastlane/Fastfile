
platform :ios do
  lane :upload_debug_screenshots do
    UI.message("üöÄ Lane upload_debug_screenshots d√©marr√©e !")
    require 'fastimage'

    files = `find screenshots/ios -name '*.png'`.split("\n")
    UI.message("üìÇ Fichiers trouv√©s : #{files.size}")

    files.each do |file|
      parts = file.split("/")
      lang = parts[3]
      device = parts[4]
      size = FastImage.size(file)

      if size
        UI.message("üñº Screenshot: #{file} (lang: #{lang}, device: #{device}, size: #{size[0]}x#{size[1]})")
      else
        UI.important("‚ö†Ô∏è  Cannot read size of: #{file}")
      end
    end
  end
end


platform :all do

  desc "üì∏ G√©n√©rer les screenshots Android & iOS multilingues"

  lane:generate_metadata do





      project_root = File.expand_path("..", __dir__)

      dart_script_android = File.join(project_root, "fastlane/generate_metadata_android.dart")
      dart_script_ios = File.join(project_root, "fastlane/generate_metadata_ios.dart")

      UI.user_error!("‚ùå Script Dart android introuvable: #{dart_script_android}") unless File.exist?(dart_script_android)
      UI.user_error!("‚ùå Script Dart iOS introuvable: #{dart_script_ios}") unless File.exist?(dart_script_ios)

      UI.message("üß† G√©n√©ration des m√©tadonn√©es Android...")
      Dir.chdir(project_root) { sh("dart '#{dart_script_android}'") }

      UI.message("üß† G√©n√©ration des m√©tadonn√©es iOS...")
      Dir.chdir(project_root) { sh("dart '#{dart_script_ios}'") }



  end







  lane :screenshots do
    avd_name = "emulator_tablet_10pouces_screenshots_voczilla"
    project_root = File.expand_path("..", __dir__)

    sh("fastlane all generate_metadata");

    UI.message("üì¶ Construction APK...")
    sh("flutter build apk")

    UI.message("üåü Lancement de l'√©mulateur...")
    start_emulator_once(avd_name)
    # "ios"     => %w[iphone6_7_inch iphone6_5_inch iphone5_5_inch ipad_pro_3gen_12_9_inch ipad_pro_11_inch ipad_pro_10_5_inch],
    #"android" => %w[phoneScreenshots sevenInchScreenshots tenInchScreenshots FeatureGraphic],
    {
      "ios" => %w[
        iPhone\ 6.7\ inch
        iPhone\ 6.5\ inch
        iPhone\ 6.1\ inch
        iPhone\ 5.8\ inch
        iPhone\ 5.5\ inch
        iPhone\ 4.7\ inch
        iPhone\ 4.0\ inch
        iPad\ Pro\ \(12.9-inch\)
        iPad\ Pro\ \(11-inch\)
        iPad\ Pro\ \(10.5-inch\)
        iPad\ \(10.2-inch\)
        iPad\ Pro\ \(9.7-inch\)
      ],


    }.each do |platform, folders|
      folders.each do |folder|
        run_screenshots_for_folder(folder, platform)
      end
    end








    UI.message("üö© Arr√™t de l'√©mulateur...")
    stop_emulator
  end

  def locale_mapping
    {
      'af' => 'af-ZA', 'am' => 'am-ET', 'ar' => 'ar', 'az' => 'az-AZ', 'be' => 'be-BY', 'bg' => 'bg-BG',
      'bn' => 'bn-BD', 'bs' => 'bs-BA', 'ca' => 'ca-ES', 'cs' => 'cs-CZ', 'da' => 'da-DK', 'de' => 'de-DE',
      'el' => 'el-GR', 'en' => 'en-US', 'es' => 'es-ES', 'et' => 'et-EE', 'eu' => 'eu-ES', 'fa' => 'fa-IR',
      'fi' => 'fi-FI', 'fr' => 'fr-FR', 'gl' => 'gl-ES', 'gu' => 'gu-IN', 'hi' => 'hi-IN', 'hr' => 'hr-HR',
      'hu' => 'hu-HU', 'hy' => 'hy-AM', 'id' => 'id-ID', 'is' => 'is-IS', 'it' => 'it-IT', 'iw' => 'iw-IL',
      'ja' => 'ja-JP', 'ka' => 'ka-GE', 'kk' => 'kk-KZ', 'km' => 'km-KH', 'kn' => 'kn-IN', 'ko' => 'ko-KR',
      'ky' => 'ky-KG', 'lo' => 'lo-LA', 'lt' => 'lt-LT', 'lv' => 'lv-LV', 'mk' => 'mk-MK', 'ml' => 'ml-IN',
      'mn' => 'mn-MN', 'mr' => 'mr-IN', 'ms' => 'ms-MY', 'my' => 'my-MM', 'ne' => 'ne-NP', 'nl' => 'nl-NL',
      'no' => 'no-NO', 'pa' => 'pa-IN', 'pl' => 'pl-PL', 'pt' => 'pt-BR', 'ro' => 'ro-RO', 'ru' => 'ru-RU',
      'si' => 'si-LK', 'sk' => 'sk-SK', 'sl' => 'sl-SI', 'sq' => 'sq-AL', 'sr' => 'sr', 'sv' => 'sv-SE',
      'sw' => 'sw', 'ta' => 'ta-IN', 'te' => 'te-IN', 'th' => 'th-TH', 'tr' => 'tr-TR', 'uk' => 'uk-UA',
      'ur' => 'ur', 'uz' => 'uz-UZ', 'vi' => 'vi-VN', 'zh' => 'zh-CN', 'zu' => 'zu-ZA'
    }
  end

  def play_supported_locales
    locale_mapping.values.uniq
  end

  def normalize_locale(locale, platform)
   mapping_ios = {
  'en' => 'en-US',
  'en-GB'  => 'en-GB',
  'en-CA'  => 'en-CA',
  'fr'  => 'fr-FR',
  'fr-CA'  => 'fr-CA',
  'es'  => 'es-ES',
  'es-MX'  => 'es-MX',
  'de'  => 'de-DE',
  'it'  => 'it',
  'pt'  => 'pt-PT',
  'pt-BR'  => 'pt-BR',
  'zh'  => 'zh-Hans',
  'zh-CN'  => 'zh-Hans',
  'zh-HK'  => 'zh-Hant',
  'zh-TW'  => 'zh-Hant',
  'ja'  => 'ja',
  'ko'  => 'ko',
  'ru'  => 'ru',
  'ar'  => 'ar-SA',
  'nl'  => 'nl-NL',
  'sv'  => 'sv',
  'fi'  => 'fi',
  'da'  => 'da',
  'no'  => 'no',
  'tr'  => 'tr',
  'pl'  => 'pl',
  'id'  => 'id',
  'th'  => 'th',
  'vi' => 'vi',
  'he' => 'he',
  'ms' => 'ms',
  'ro' => 'ro',
  'cs' => 'cs',
  'sk' => 'sk',
  'hr' => 'hr',
  'uk' => 'uk',
  'hi' => 'hi',
  'el' => 'el',
  'ca' => 'ca',
   }

    supported_ios = mapping_ios.values.uniq

    case platform
    when "android"
      mapped = locale_mapping[locale] || (locale =~ /^[a-z]{2}$/ ? "#{locale}-#{locale.upcase}" : locale)
      return mapped if play_supported_locales.include?(mapped)
    when "ios"
      mapped = mapping_ios[locale] || locale
      return mapped if supported_ios.include?(mapped)
    end
    nil
  end
#adb -s #{emulator_id} shell pm clear com.geoffreypetain.voczilla.voczilla &&
  def run_screenshots_for_folder(dest_folder, platformStore)
  project_root = File.expand_path("..", __dir__)
  screenshots_dir = File.join(project_root, "test_driver/screenshots/")
  FileUtils.rm_rf(screenshots_dir)
  FileUtils.mkdir_p(screenshots_dir)
  UI.message("üßπ Dossier screenshots nettoy√© pour #{dest_folder}.")

  emulator_id = get_running_emulator_id
  set_emulator_resolution(emulator_id, dest_folder)

  locales = extract_locales
  UI.user_error!("‚ùå Aucune locale trouv√©e dans lib/l10n") if locales.empty?

  locales.each do |locale|
    UI.message("üåê Locale : #{locale}")
    is_feature = dest_folder == "FeatureGraphic"

    begin
        sh("caffeinate -s flutter drive \
          --driver=test_driver/integration_test.dart \
          --target=test_driver/app.dart \
          -d #{emulator_id} \
          --dart-define=LOCALE=#{locale} \
          --dart-define=FOR_FEATURE_GRAPHIC=#{is_feature} \
          --dart-define=PLATFORM=#{platformStore} \
          --dart-define=DESTFOLDER=#{dest_folder} \
          --screenshot=test_driver/screenshots")

    rescue => e
      UI.error("üö® Erreur durant flutter drive pour #{locale}/#{dest_folder} : #{e}")
      next
    end

    normalized_locale = normalize_locale(locale, platformStore)
    next unless normalized_locale

    screenshots = Dir[File.join(screenshots_dir, "*.png")]
     dest_dir = if is_feature
       File.join(project_root, "fastlane/metadata/#{platformStore}/#{normalized_locale}/images/")
     else
       if platformStore == "ios"
         File.join(project_root, "fastlane/metadata/#{platformStore}/#{normalized_locale}/#{dest_folder}/")
       else
         File.join(project_root, "fastlane/metadata/#{platformStore}/#{normalized_locale}/images/#{dest_folder}/")
       end
     end

    FileUtils.mkdir_p(dest_dir)
    screenshots.empty? ? UI.important("Aucune capture pour #{locale}") : FileUtils.cp(screenshots, dest_dir)
  end

  reset_emulator_resolution(emulator_id)
end


def extract_locales
  project_root = File.expand_path("..", __dir__)
  arb_files = Dir[File.join(project_root, "lib/l10n/app_*.arb")]
  locales = arb_files.map do |f|
    match = f.match(/app_(.+)\.arb$/)
    match[1] if match
  end.compact.uniq

  UI.user_error!("‚ùå Erreur d'extraction des locales: aucun nom de locale trouv√© dans les fichiers ARB") if locales.empty?
  locales
end

  def get_running_emulator_id
    line = sh("adb devices", log: false).lines.find { |l| l.start_with?("emulator") && l.include?("device") }
    line&.split("\t")&.first
  end

  def start_emulator_once(avd_name)
    devices = sh("adb devices", log: false)
    unless devices.lines.any? { |line| line.start_with?("emulator") && line.include?("device") }
      emulator_cmd = [
        ENV['ANDROID_HOME'] + "/emulator/emulator",
        "-avd", avd_name,
        "-no-snapshot-load",
        "-no-audio"
      ]
      Process.spawn(*emulator_cmd, [:out, :err] => "/dev/null")

      UI.message("‚åõ Attente de connexion ADB...")
      24.times do
        sleep(5)
        devices = sh("adb devices", log: false)
        break if devices.lines.any? { |line| line.start_with?("emulator") && line.include?("device") }
      end
    end

    UI.message("‚öôÔ∏è Attente de boot complet Android...")
    24.times do
      boot_status = sh("adb shell getprop sys.boot_completed", log: false).strip
      break if boot_status == "1"
      sleep(2)
    end
  end

  def stop_emulator
    emulator_id = get_running_emulator_id
    return unless emulator_id
    sh("adb -s #{emulator_id} emu kill")
    sleep(5)
  end

  def reset_emulator_resolution(emulator_id)
    sh("adb -s #{emulator_id} shell wm size reset && adb -s #{emulator_id} shell wm density reset")
  end

  def set_emulator_resolution(emulator_id, dest_folder)
   case dest_folder
        when "phoneScreenshots"
            sh("adb -s #{emulator_id} shell wm size 1080x1920 && adb -s #{emulator_id} shell wm density 420")
        when "sevenInchScreenshots"
            sh("adb -s #{emulator_id} shell wm size 800x1280 && adb -s #{emulator_id} shell wm density 213")
        when "tenInchScreenshots"
            sh("adb -s #{emulator_id} shell wm size 1600x2560 && adb -s #{emulator_id} shell wm density 320")
        when "FeatureGraphic"
            sh("adb -s #{emulator_id} shell wm size 1024x500 && adb -s #{emulator_id} shell wm density 160")
        when "iPhone 6.7 inch"
            sh("adb -s #{emulator_id} shell wm size 1290x2796 && adb -s #{emulator_id} shell wm density 460")
        when "iPhone 6.5 inch"
            sh("adb -s #{emulator_id} shell wm size 1242x2688 && adb -s #{emulator_id} shell wm density 458")
        when "iPhone 6.1 inch (Pro)"
            sh("adb -s #{emulator_id} shell wm size 1179x2556 && adb -s #{emulator_id} shell wm density 460")
        when "iPhone 6.1 inch"
            sh("adb -s #{emulator_id} shell wm size 1170x2532 && adb -s #{emulator_id} shell wm density 460")
        when "iPhone 5.8 inch"
            sh("adb -s #{emulator_id} shell wm size 1125x2436 && adb -s #{emulator_id} shell wm density 458")
        when "iPhone 5.5 inch"
            sh("adb -s #{emulator_id} shell wm size 1242x2208 && adb -s #{emulator_id} shell wm density 401")
        when "iPhone 4.7 inch"
            sh("adb -s #{emulator_id} shell wm size 750x1334 && adb -s #{emulator_id} shell wm density 326")
        when "iPhone 4.0 inch"
            sh("adb -s #{emulator_id} shell wm size 640x1136 && adb -s #{emulator_id} shell wm density 326")
        when "iPad Pro (12.9-inch)"
            sh("adb -s #{emulator_id} shell wm size 2048x2732 && adb -s #{emulator_id} shell wm density 264")
        when "iPad Pro (11-inch)"
            sh("adb -s #{emulator_id} shell wm size 1668x2388 && adb -s #{emulator_id} shell wm density 264")
        when "iPad Pro (10.5-inch)"
            sh("adb -s #{emulator_id} shell wm size 1668x2224 && adb -s #{emulator_id} shell wm density 264")
        when "iPad (10.2-inch)"
            sh("adb -s #{emulator_id} shell wm size 1620x2160 && adb -s #{emulator_id} shell wm density 264")
        when "iPad Pro (9.7-inch)"
            sh("adb -s #{emulator_id} shell wm size 1536x2048 && adb -s #{emulator_id} shell wm density 264")
        when "Mac"
            sh("adb -s #{emulator_id} shell wm size 1280X800 && adb -s #{emulator_id} shell wm density 220")
   else
     UI.error("Unsupported size: #{dest_folder}")
   end
  end
end
